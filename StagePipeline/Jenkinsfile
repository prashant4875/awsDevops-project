// def COLOR_MAP = [
//     'SUCCESS': 'good',
//     'FAILURE': 'danger',
// ]

pipeline {
    agent any 
    tools {
        maven "MAVEN3"
        jdk  "OracleJDK8"
    }
    
    environment {
        SNAP_REPO = 'awsDevops-snapshot'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin'
        RELEASE_REPO = 'awsDevops-release'
        CENTRAL_REPO = 'awsDevops-central'
        NEXUSIP = '172.31.81.133'
        NEXUSPORT = '8081'
        NEXUS_GRP_REPO = 'awsDevops-group'
        NEXUS_LOGIN = 'nexuslogin'
        ARTIFACT_NAME = "awsDevops-v${env.BUILD_ID}.war"
        AWS_S3_BUCKET = 'awsdevops4875'
        AWS_EB_APP_NAME = 'awsDevops'
        AWS_EB_ENVIRONMENT = 'Awsdevops-env'
        AWS_EB_APP_VERSION = "${env.BUILD_ID}"
        // SONARSERVER = 'sonarserver'
        // SONARSCANNER = 'sonarscanner'
        // registryCredential = 'ecr:us-east-1:awscreds'
        // appRegistry = '674033740314.dkr.ecr.us-east-1.amazonaws.com/awsdevops-ecregistry'
        // awsDevopsRegistry = 'https://674033740314.dkr.ecr.us-east-1.amazonaws.com'
        // cluster = 'awsDevopsECSCluster'
        // service = 'awsDevopsServiceECS'

    }
    stages{
        stage('Build'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo "Now Archiving"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
        stage ('Test') {
            steps {
                sh 'mvn -s settings.xml test'
            }
        }
        stage ('Checkstyle Analysis') {
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }
        // stage('Sonar Analysis') {
        //     environment {
        //         scannerHome = tool "${SONARSCANNER}"
        //     }
        //     steps {
        //         withSonarQubeEnv("${SONARSERVER}") {
        //             sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
        //             -Dsonar.projectName=vprofile-repo \
        //             -Dsonar.projectVersion=1.0 \
        //             -Dsonar.sources=src/ \
        //             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
        //             -Dsonar.junit.reportsPath=target/surefire-reports/ \
        //             -Dsonar.jacoco.reportsPath=target/jacoco.exec \
        //             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
        //          }
        //     }
        // }

        // stage ('Quality Gates') {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS'){
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage ('Artifact Uploader') {
            steps {
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                groupId: 'QA',
                version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                repository: "${RELEASE_REPO}",
                credentialsId: "${NEXUS_LOGIN}",
                artifacts: [
                    [artifactId: 'awsDevops',
                    classifier: '',
                    file: 'target/vprofile-v2.war',
                    type: 'war']
                ]
                    )
            }
        }

        stage ('Deployment to AWS Elastic Beanstalk'){
            steps {
                withAWS(credentials: 'awsjenkins', region: 'us-east-1') {
                    sh "aws s3 cp ./target/vprofile-v2.war s3://${AWS_S3_BUCKET}/${ARTIFACT_NAME}"
                    sh "aws elasticbeanstalk create-application-version --application-name ${AWS_EB_APP_NAME} --version-label ${AWS_EB_APP_VERSION} --source-bundle S3Bucket=${AWS_S3_BUCKET},S3Key=${ARTIFACT_NAME}"
                    sh "aws elasticbeanstalk update-environment --application-name ${AWS_EB_APP_NAME} --environment-name ${AWS_EB_ENVIRONMENT} --version-label ${AWS_EB_APP_VERSION}"
                }
            }
        }

        // stage ('Ansible deployment'){
        //     steps{
        //         ansiblePlaybook([
        //             inventory: 'ansible/stage.inventory',
        //             playbook: 'ansible/site.yml',
        //             installation: 'ansible',
        //             colorized: true,
        //             credentialsId: 'applogin',
        //             disableHostKeyChecking: true,
        //             extraVars: [
        //                 USER: "admin",
        //                 PASS: "admin",
        //                 nexusip: "172.31.81.133",
        //                 reponame: "awsDevops-release",
        //                 groupid: "QA",
        //                 time: "${env.BUILD_TIMESTAMP}",
        //                 build: "${env.BUILD_ID}",
        //                 artifactid: "awsDevops",
        //                 awsDevops_version: "awsDevops-${env.BUILD_ID}-${env.BUILD_TIMESTAMP}.war"
        //             ]
        //         ])
        //     }
        // }

        // stage ('Build App Image') {
        //     steps {
        //         script {
        //             dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
        //         }
        //     }
        // }

        // stage ('Upload App Image') {
        //     steps {
        //         script {
        //             docker.withRegistry( awsDevopsRegistry, registryCredential) {
        //                 dockerImage.push("$BUILD_NUMBER")
        //                 dockerImage.push('latest')
        //             }
        //         }
        //     }
        // }

        // stage ('Deploy to ECS staging') {
        //     steps {
        //         withAWS(credentials: 'awscreds', region: 'us-east-1'){
        //             sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
        //         }
        //     }
        // }


    }
    // post {
    //     always {
    //         echo 'Slack Notification.'
    //         slackSend channel: '#devops',
    //         color: COLOR_MAP[currentBuild.currentResult],
    //         message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More ino at: ${env.BUILD_URL}"

    //     }
    // }
}